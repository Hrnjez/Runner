{"version":3,"sources":["Nav.js","astarAlgorithm/Astar.js","components/Node.js","components/Pathfind.js","Play.js","Settings.js","App.js","serviceWorker.js","index.js"],"names":["Nav","navStyle","color","textDecoration","fontFamily","style","to","className","heruistic","a","b","Math","abs","x","y","Astar","startNode","endNode","openSet","closedSet","path","visitedNodes","push","leastIndex","i","length","f","current","temp","previous","filter","elt","neighbours","neighbour","includes","isWall","tempG","g","newPath","h","error","Node","isStart","isEnd","row","col","classes","id","Pathfind","useState","Grid","setGrid","Path","setPath","VisitedNodes","setVisitedNodes","useEffect","initalizeGrid","grid","Array","createSpot","addNeighbours","j","Spot","addneighbours","this","random","undefined","rows","cols","gridWithNode","map","rowIndex","key","colIndex","console","log","onClick","setTimeout","shortestPathNodes","node","document","getElementById","visulaizeShortestPath","margin","Play","Settings","Home","setStructure","App","structure","exact","render","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.7e5f9dcc.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Nav() {\r\n    const navStyle = {\r\n        color: 'rgb(53, 124, 124)',\r\n        textDecoration:'none',\r\n        fontFamily: 'Helvetica'\r\n    }\r\n  return (\r\n    <nav >\r\n        <Link style={navStyle}  to=\"/\">\r\n            <i className=\"fas fa-chess-board fa-4x\"></i>\r\n        </Link>\r\n        <ul className=\"nav-links\">\r\n            <Link style={navStyle} to=\"/Runner/Play\">\r\n            <li>Play</li>\r\n            </Link>\r\n            <Link style={navStyle} to=\"/Runner/settings\">\r\n            <li>Settigns</li>\r\n            </Link>\r\n        </ul>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Nav;","function Astar(startNode, endNode) {\r\n    let openSet = [];\r\n    let closedSet = [];\r\n    let path = [];\r\n    let visitedNodes = [];\r\n\r\n        openSet.push(startNode);\r\n        while(openSet.length > 0) {\r\n            let leastIndex = 0;\r\n            for( let i=0; i < openSet.length; i++){\r\n                if( openSet[i].f < openSet[leastIndex].f) {\r\n                    leastIndex = i;\r\n                }\r\n            }\r\n            let current = openSet[leastIndex];\r\n            visitedNodes.push(current);\r\n\r\n            if(current === endNode) {\r\n                let temp = current;\r\n                path.push(temp);\r\n                while(temp.previous){\r\n                    path.push(temp.previous);\r\n                    temp = temp.previous;\r\n                }\r\n                // console.log(path);\r\n                return {path, visitedNodes};\r\n                // console.log('Done! Found the path!')\r\n            }\r\n\r\n            openSet = openSet.filter(elt => elt !== current);\r\n            closedSet.push(current);\r\n\r\n            let neighbours = current.neighbours;\r\n            for ( let i =0; i < neighbours.length; i++){\r\n                let neighbour = neighbours[i];\r\n                if(!closedSet.includes(neighbour) && !neighbour.isWall){\r\n                    let tempG = current.g +1;\r\n                    let newPath = false;\r\n                    if(openSet.includes(neighbour)){\r\n                        if(tempG < neighbour.g) {\r\n                            neighbour.g = tempG;\r\n                            newPath = true;\r\n                        }\r\n                    } else {\r\n                        neighbour.g = tempG;\r\n                        newPath = true;\r\n                        openSet.push(neighbour);\r\n                    }\r\n                    if(newPath) {\r\n                        neighbour.h = heruistic(neighbour, endNode);\r\n                        neighbour.f = neighbour.g + neighbour.f;\r\n                        neighbour.previous = current;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return { path, visitedNodes, error: 'No path found!'};\r\n}\r\nfunction heruistic(a, b) {\r\n    let d = Math.abs(a.x - a.y) + Math.abs(b.x - b.y);\r\n    return d;\r\n}\r\nexport default Astar;","import React from 'react';\r\nimport './Node.css';\r\nconst Node = ({isStart, isEnd, row, col, isWall}) => {\r\n    const classes = isStart ? 'node-start' : isWall ? 'iswall' : isEnd ? 'node-end' : '';\r\n    return(\r\n        <div className={`node ${classes}`} id = {`node=${row}-${col}`}></div>\r\n    )\r\n}\r\nexport default Node;","import React, {useState, useEffect} from 'react';\r\nimport Astar from '../astarAlgorithm/Astar';\r\nimport { Link } from 'react-router-dom';\r\nimport Node from './Node';\r\nimport './Pathfind.css';\r\n\r\nlet cols = 10;\r\nlet rows = 10;\r\nconst NODE_START_ROW = 4;\r\nconst NODE_START_COL = 0;\r\nconst NODE_END_ROW = 4;\r\nconst NODE_END_COL = 9;\r\n\r\nconst Pathfind = () => {\r\n\r\n\r\n\r\n    const [Grid, setGrid] = useState([]);\r\n    const [Path, setPath] = useState([]);\r\n    const [VisitedNodes, setVisitedNodes] = useState([]);\r\n\r\n    useEffect(()=> {\r\n        initalizeGrid();\r\n    },[]);\r\n\r\n    //Create the Grid\r\n    const initalizeGrid = () => {\r\n\r\n        const grid = new Array(rows);\r\n\r\n        for(let i =0; i < rows; i++){\r\n            grid[i] =new Array(cols)\r\n        } \r\n\r\n        createSpot(grid);\r\n\r\n        setGrid(grid);\r\n\r\n        addNeighbours(grid);\r\n\r\n        const startNode = grid[NODE_START_ROW][NODE_START_COL];\r\n        const endNode = grid[NODE_END_ROW][NODE_END_COL];\r\n        let path = Astar(startNode, endNode);\r\n        startNode.isWall = false;\r\n        endNode.isWall = false;\r\n        setPath(path.path);\r\n        setVisitedNodes(path.visitedNodes)\r\n     \r\n    };\r\n\r\n    //create the Spot\r\n    const createSpot = (grid) => {\r\n        for(let i=0; i < rows; i++){\r\n            for(let j=0; j < cols; j++){\r\n                grid[i][j] = new Spot(i, j);\r\n            }\r\n        }\r\n    }\r\n    //Add neighbours\r\n    const addNeighbours = (grid) => {\r\n        for( let i = 0; i < rows; i++) {\r\n            for( let j = 0; j < cols; j++) {\r\n                grid[i][j].addneighbours(grid);\r\n            }\r\n        }\r\n}\r\n\r\n    //SPOT constructor\r\n    function Spot (i,j) {\r\n        this.x = i;\r\n        this.y = j;\r\n        this.isStart = this.x === NODE_START_ROW && this.y === NODE_START_COL;\r\n        this.isEnd = this.x === NODE_END_ROW && this.y === NODE_END_COL;\r\n        this.g = 0;\r\n        this.f = 0;\r\n        this.h = 0;\r\n        this.neighbours = [];\r\n        this.isWall = false;\r\n        if(Math.random(1) < 0.2) {\r\n            this.isWall = true;\r\n        }\r\n        this.previous = undefined;\r\n        this.addneighbours = function (grid) {\r\n            let i = this.x;\r\n            let j = this.y;\r\n            if(i > 0) this.neighbours.push(grid[i-1][j]);\r\n            if(i < rows - 1) this.neighbours.push(grid[i+1][j]);\r\n            if(j > 0) this.neighbours.push(grid[i][j-1]);\r\n            if( j < cols - 1) this.neighbours.push(grid[i][j+1]);\r\n        };\r\n    }\r\n\r\n    //Grid with Node\r\n    const gridWithNode = (\r\n        <div>\r\n            {Grid.map((row, rowIndex)=>{\r\n                return (\r\n                    <div key={rowIndex} className=\"row-wrapper\">\r\n                        {row.map((col, colIndex)=> {\r\n                            const {isStart, isEnd, isWall} = col;\r\n                            return (\r\n                                <Node \r\n                                key={colIndex} \r\n                                isStart={isStart} \r\n                                isEnd={isEnd} \r\n                                row={rowIndex}\r\n                                col={colIndex}\r\n                                isWall={isWall}/>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n\r\n    const visulaizeShortestPath = (shortestPathNodes) => {\r\n        for ( let i =0; i < shortestPathNodes.length; i++){\r\n            setTimeout(()=>{\r\n                const node = shortestPathNodes[i];\r\n                document.getElementById(`node=${node.x}-${node.y}`).className = 'node node-shortest-path';\r\n            }, 10* i)\r\n        }\r\n    };\r\n\r\n    const visualizePath = () => {\r\n        for ( let i =0; i <= VisitedNodes.length; i++){\r\n            if( i === VisitedNodes.length) {\r\n                setTimeout(()=>{\r\n                    visulaizeShortestPath(Path);\r\n                }, 20* i);\r\n            }\r\n            else {\r\n                setTimeout(()=> {\r\n                    const node = VisitedNodes[i];\r\n                    document.getElementById(`node=${node.x}-${node.y}`).className = 'node node-visited';\r\n                }, 20 * i)\r\n            }\r\n        }\r\n    };\r\n\r\n    console.log(Path);\r\n    return (\r\n    <div className=\"wrapper\">\r\n            <button className=\"run-btn\" onClick={visualizePath}>Run</button>\r\n            <Link to=\"/\">\r\n            <button className=\"run-btn\">End Game</button>\r\n            </Link>\r\n        <div style={{margin: '20px'}}>{gridWithNode}</div>\r\n    </div>\r\n    )\r\n}\r\nexport default Pathfind;","import React from 'react';\r\n\r\nimport './App.css';\r\nimport Pathfind from './components/Pathfind';\r\n\r\nconst Play = () => {\r\n\r\n  return (\r\n    <div >\r\n      <Pathfind  />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Play;","import React from 'react';\r\nimport './App.css';\r\n\r\nfunction Settings() {\r\n  return (\r\n    <div>\r\n      <h2>settings</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Settings;\r\n","import React, {useState} from 'react';\nimport './App.css';\nimport Nav from './Nav';\nimport Play from './Play';\nimport Settings from './Settings';\nimport { Link } from 'react-router-dom';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\n\n\nfunction App() {\n  \nconst [structure, setStructure] = useState(5);\n\n  return (\n    <Router >\n    <div className=\"App\"  >\n\n      <Nav/>\n      <Route path=\"/Runner/\"setStructure={setStructure} exact render = {() => <Home setStructure={setStructure} />}/>\n      <Route path=\"/Runner/settings\" component={Settings}/>\n      <Route path=\"/Runner/play\"   render = {() => <Play structure={structure}  />}/>\n    </div>\n    </Router>\n  );\n}\nconst Home = ({ setStructure }) =>  {\n  const structureHandler = (e) => {\n    setStructure(parseInt(e.target.value));\n    console.log(parseInt(e.target.value));\n  }\n\n  return (\n  <div className=\"homepage\">\n    <div>\n  <h1>The <span>Maze</span> Runner</h1>\n    <Link  to=\"/Play\">\n      <button className='play-btn'> Play!\n      </button>\n    </Link>\n    </div>\n\n  </div>\n    )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}